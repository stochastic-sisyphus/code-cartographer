<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Code Analysis Dashboard</title>
  <!-- Modern CSS framework -->
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <!-- Visualization libraries -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.0/dist/chart.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/d3@7.0.0/dist/d3.min.js"></script>
  <style>
    .metric-card {
      @apply bg-white p-6 rounded-lg shadow-md;
    }
    .metric-title {
      @apply text-lg font-semibold text-gray-800 mb-2;
    }
    .metric-value {
      @apply text-3xl font-bold text-blue-600;
    }
    .metric-trend {
      @apply text-sm text-gray-500 mt-2;
    }
    .code-block {
      @apply font-mono text-sm bg-gray-50 p-4 rounded-md overflow-x-auto;
    }
    .diff-block {
      @apply font-mono text-sm whitespace-pre overflow-x-auto;
    }
    .diff-block .addition {
      @apply bg-green-100 text-green-800;
    }
    .diff-block .deletion {
      @apply bg-red-100 text-red-800;
    }
    .tab-content {
      @apply hidden;
    }
    .tab-content.active {
      @apply block;
    }
    #dependency-graph svg {
      @apply w-full h-[600px] bg-white rounded-lg shadow;
    }
    .tooltip {
      @apply absolute bg-gray-900 text-white px-2 py-1 rounded text-sm z-50;
    }
  </style>
</head>
<body class="bg-gray-100 min-h-screen">
  <nav class="bg-white shadow-md">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between h-16">
        <div class="flex">
          <div class="flex-shrink-0 flex items-center">
            <h1 class="text-xl font-bold text-gray-800">Code Analysis Dashboard</h1>
          </div>
        </div>
        <div class="flex items-center">
          <span class="text-sm text-gray-500">Generated: {{ generation_time }}</span>
        </div>
      </div>
    </div>
  </nav>

  <main class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
    <!-- Overview Section -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
      <div class="metric-card">
        <div class="metric-title">Total Files</div>
        <div class="metric-value">{{ metrics.total_files }}</div>
        <div class="metric-trend">{{ metrics.file_trend }}</div>
      </div>
      <div class="metric-card">
        <div class="metric-title">Code Variants</div>
        <div class="metric-value">{{ metrics.variant_count }}</div>
        <div class="metric-trend">{{ metrics.variant_trend }}</div>
      </div>
      <div class="metric-card">
        <div class="metric-title">Avg. Complexity</div>
        <div class="metric-value">{{ metrics.avg_complexity|round(2) }}</div>
        <div class="metric-trend">{{ metrics.complexity_trend }}</div>
      </div>
      <div class="metric-card">
        <div class="metric-title">Documentation</div>
        <div class="metric-value">{{ (metrics.doc_coverage * 100)|round }}%</div>
        <div class="metric-trend">{{ metrics.doc_trend }}</div>
      </div>
    </div>

    <!-- Tab Navigation -->
    <div class="mb-6 border-b border-gray-200">
      <nav class="flex -mb-px">
        <button class="tab-btn px-4 py-2 font-medium" data-tab="variants">
          Code Variants
        </button>
        <button class="tab-btn px-4 py-2 font-medium" data-tab="complexity">
          Complexity Analysis
        </button>
        <button class="tab-btn px-4 py-2 font-medium" data-tab="dependencies">
          Dependencies
        </button>
        <button class="tab-btn px-4 py-2 font-medium" data-tab="documentation">
          Documentation
        </button>
      </nav>
    </div>

    <!-- Tab Content -->
    <div class="tab-container">
      <!-- Code Variants Tab -->
      <div id="variants" class="tab-content">
        <div class="bg-white rounded-lg shadow p-6">
          <h2 class="text-xl font-semibold mb-4">Similar Code Implementations</h2>
          {% for group in variant_groups %}
          <div class="mb-8 border-b pb-6">
            <h3 class="text-lg font-medium mb-3">{{ group.name }}</h3>
            <div class="grid grid-cols-2 gap-4">
              <div>
                <h4 class="font-medium mb-2">Base Implementation</h4>
                <div class="code-block">{{ group.base_code }}</div>
              </div>
              <div>
                <h4 class="font-medium mb-2">Similar Variants ({{ group.variants|length }})</h4>
                {% for variant in group.variants %}
                <details class="mb-2">
                  <summary class="cursor-pointer py-2">
                    {{ variant.path }} ({{ (variant.similarity * 100)|round }}% similar)
                  </summary>
                  <div class="diff-block mt-2">
                    {% for line in variant.diff %}
                    <div class="{{ 'addition' if line.startswith('+') else 'deletion' if line.startswith('-') else '' }}">
                      {{ line }}
                    </div>
                    {% endfor %}
                  </div>
                </details>
                {% endfor %}
              </div>
            </div>
          </div>
          {% endfor %}
        </div>
      </div>

      <!-- Complexity Analysis Tab -->
      <div id="complexity" class="tab-content">
        <div class="bg-white rounded-lg shadow p-6">
          <h2 class="text-xl font-semibold mb-4">Code Complexity Distribution</h2>
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div>
              <canvas id="complexityChart"></canvas>
            </div>
            <div>
              <h3 class="text-lg font-medium mb-3">High Complexity Files</h3>
              <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                  <thead>
                    <tr>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">File</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Complexity</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Lines</th>
                    </tr>
                  </thead>
                  <tbody class="bg-white divide-y divide-gray-200">
                    {% for file in complexity_data.high_complexity %}
                    <tr>
                      <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{{ file.name }}</td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{{ file.complexity }}</td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{{ file.lines }}</td>
                    </tr>
                    {% endfor %}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Dependencies Tab -->
      <div id="dependencies" class="tab-content">
        <div class="bg-white rounded-lg shadow p-6">
          <h2 class="text-xl font-semibold mb-4">Module Dependencies</h2>
          <div id="dependency-graph"></div>
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6">
            <div>
              <h3 class="text-lg font-medium mb-3">Most Referenced Modules</h3>
              <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                  <thead>
                    <tr>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Module</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">References</th>
                    </tr>
                  </thead>
                  <tbody class="bg-white divide-y divide-gray-200">
                    {% for module in dependency_data.most_referenced %}
                    <tr>
                      <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{{ module.name }}</td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{{ module.references }}</td>
                    </tr>
                    {% endfor %}
                  </tbody>
                </table>
              </div>
            </div>
            <div>
              <h3 class="text-lg font-medium mb-3">External Dependencies</h3>
              <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                  <thead>
                    <tr>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Package</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Usage Count</th>
                    </tr>
                  </thead>
                  <tbody class="bg-white divide-y divide-gray-200">
                    {% for pkg in dependency_data.external %}
                    <tr>
                      <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{{ pkg.name }}</td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{{ pkg.count }}</td>
                    </tr>
                    {% endfor %}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Documentation Tab -->
      <div id="documentation" class="tab-content">
        <div class="bg-white rounded-lg shadow p-6">
          <h2 class="text-xl font-semibold mb-4">Documentation Coverage</h2>
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div>
              <canvas id="docChart"></canvas>
            </div>
            <div>
              <h3 class="text-lg font-medium mb-3">Undocumented Components</h3>
              <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                  <thead>
                    <tr>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Component</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">File</th>
                    </tr>
                  </thead>
                  <tbody class="bg-white divide-y divide-gray-200">
                    {% for item in documentation_data.undocumented %}
                    <tr>
                      <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{{ item.name }}</td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{{ item.type }}</td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{{ item.file }}</td>
                    </tr>
                    {% endfor %}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <script>
    // Tab switching logic
    document.querySelectorAll('.tab-btn').forEach(button => {
      button.addEventListener('click', () => {
        const tabId = button.dataset.tab;
        document.querySelectorAll('.tab-content').forEach(content => {
          content.classList.remove('active');
        });
        document.querySelectorAll('.tab-btn').forEach(btn => {
          btn.classList.remove('text-blue-600', 'border-blue-600');
        });
        document.getElementById(tabId).classList.add('active');
        button.classList.add('text-blue-600', 'border-blue-600');
      });
    });

    // Activate first tab by default
    document.querySelector('.tab-btn').click();

    // Complexity Chart
    const complexityCtx = document.getElementById('complexityChart').getContext('2d');
    new Chart(complexityCtx, {
      type: 'scatter',
      data: {{ complexity_data.chart_data|tojson }},
      options: {
        responsive: true,
        plugins: {
          title: {
            display: true,
            text: 'Complexity vs Lines of Code'
          }
        },
        scales: {
          x: {
            title: {
              display: true,
              text: 'Lines of Code'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Cyclomatic Complexity'
            }
          }
        }
      }
    });

    // Documentation Chart
    const docCtx = document.getElementById('docChart').getContext('2d');
    new Chart(docCtx, {
      type: 'doughnut',
      data: {{ documentation_data.chart_data|tojson }},
      options: {
        responsive: true,
        plugins: {
          title: {
            display: true,
            text: 'Documentation Coverage'
          }
        }
      }
    });

    // Dependency Graph
    const graph = {{ dependency_data.graph|tojson }};
    const svg = d3.select('#dependency-graph')
      .append('svg')
      .attr('viewBox', '0 0 800 600');

    const simulation = d3.forceSimulation(graph.nodes)
      .force('link', d3.forceLink(graph.links).id(d => d.id))
      .force('charge', d3.forceManyBody().strength(-150))
      .force('center', d3.forceCenter(400, 300));

    const link = svg.append('g')
      .selectAll('line')
      .data(graph.links)
      .join('line')
      .attr('stroke', '#999')
      .attr('stroke-opacity', 0.6)
      .attr('stroke-width', d => Math.sqrt(d.value));

    const node = svg.append('g')
      .selectAll('circle')
      .data(graph.nodes)
      .join('circle')
      .attr('r', 5)
      .attr('fill', '#69b3a2')
      .call(drag(simulation));

    node.append('title')
      .text(d => d.id);

    simulation.on('tick', () => {
      link
        .attr('x1', d => d.source.x)
        .attr('y1', d => d.source.y)
        .attr('x2', d => d.target.x)
        .attr('y2', d => d.target.y);

      node
        .attr('cx', d => d.x)
        .attr('cy', d => d.y);
    });

    function drag(simulation) {
      function dragstarted(event) {
        if (!event.active) simulation.alphaTarget(0.3).restart();
        event.subject.fx = event.subject.x;
        event.subject.fy = event.subject.y;
      }
      
      function dragged(event) {
        event.subject.fx = event.x;
        event.subject.fy = event.y;
      }
      
      function dragended(event) {
        if (!event.active) simulation.alphaTarget(0);
        event.subject.fx = null;
        event.subject.fy = null;
      }
      
      return d3.drag()
        .on('start', dragstarted)
        .on('drag', dragged)
        .on('end', dragended);
    }
  </script>
</body>
</html>
